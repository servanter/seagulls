<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.crop.seagulls.dao.AdminUserDAO">

	<resultMap id="adminUserMap" type="adminUser">
		<result property="id" column="id" />
		<result property="userName" column="user_name" />
		<result property="password" column="password" />
		<result property="isValid" column="is_valid" />
		<result property="createTime" column="create_Time" />
		<result property="updateTime" column="update_time" />
	</resultMap>

	<sql id="base_columns">id, user_name, password, is_valid, create_time, update_time</sql>
	
	<resultMap id="adminUserWithRolesMap" type="adminUser"
		extends="adminUserMap">
		<result property="roleCodes" column="role_codes" />
		<result property="roleIds" column="role_ids" />
	</resultMap>

	
	<select id="getAll" resultMap="adminUserMap">
		SELECT * FROM crop_admin_user WHERE is_valid = 1
	</select>
	<select id="getByUser" parameterType="adminUser"
		resultMap="adminUserMap">
		SELECT * FROM crop_admin_user WHERE user_name = #{userName} AND
		password = #{password} AND is_valid = 1
	</select>

	<select id="getByUserName" parameterType="string"
		resultMap="adminUserWithRolesMap">
		SELECT u.*, GROUP_CONCAT(r.role_code) AS role_codes,
		GROUP_CONCAT(CONVERT(r.id, char)) AS role_ids FROM
		crop_admin_user u INNER JOIN crop_admin_user_role ur INNER JOIN
		crop_admin_role r ON u.id = ur.user_id AND r.id = ur.role_id
		WHERE u.user_name = #{userName} AND u.is_valid = 1 AND
		r.is_valid = 1 GROUP BY u.id
	</select>
	
	<select id="getUsersWithRoles" resultMap="adminUserWithRolesMap">
		SELECT u.*, GROUP_CONCAT(r.role_code) AS role_codes,
		GROUP_CONCAT(CONVERT(r.id, char)) AS role_ids FROM
		crop_admin_user u INNER JOIN crop_admin_user_role ur INNER JOIN
		crop_admin_role r ON u.id = ur.user_id AND r.id = ur.role_id
		WHERE u.is_valid = 1 AND r.is_valid = 1 GROUP BY u.id
	</select>
	
	<select id="getList" parameterType="adminUser" resultMap="adminUserMap">
		SELECT
		<include refid="base_columns" />
		FROM crop_admin_user WHERE is_valid = 1
		<if test="userName != null and userName.length() > 0">
			AND user_name = #{userName}
		</if>
		<if test="exceptId != null and exceptId > 0">
			AND id &lt;&gt; #{exceptId}
		</if>
	</select>
	
	<select id="getListCount" resultType="int">
		SELECT COUNT(*) FROM crop_admin_user WHERE is_valid = 1
		<if test="userName != null and userName.length() > 0">
			AND user_name = #{userName}
		</if>
		<if test="exceptId != null and exceptId > 0">
			AND id &lt;&gt; #{exceptId}
		</if>
	</select>
	
	<select id="getById" parameterType="long" resultMap="adminUserMap">
		SELECT 
		<include refid="base_columns" />
		FROM crop_admin_user WHERE is_valid = 1 AND id = #{id}
	</select>
	
	<update id="delete" parameterType="long">
		UPDATE crop_admin_user SET is_valid = 0 WHERE id = #{id}
	</update>
	
	<update id="update" parameterType="adminUser">
		UPDATE crop_admin_user 
		<set>
			<if test="password != null and password.length() > 0">
				password = #{password},
			</if>
		</set>
		WHERE id = #{id}
	</update>

	<insert id="save" parameterType="adminUser">
		INSERT INTO crop_admin_user (user_name, password, create_time) VALUES (#{userName}, #{password}, NOW())
		<selectKey resultType="Long" keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
</mapper>
